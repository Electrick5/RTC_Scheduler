esphome:
  name: "schedule-test"
  libraries:
    - "Wire"
  on_boot:
    then:
        - ds1307.read_time:
esp32:
  board: esp32dev
  framework:
    type: arduino

api:
  password: !secret api_password
  

ota:
  password: !secret ota_password

logger:
    
    # Enable fallback hotspot (captive portal) in case wifi connection fails
    level: VERY_VERBOSE
    logs: 
        api: DEBUG
        homeassistant: DEBUG
        nextion: DEBUG
        api.service: DEBUG
        sensor: DEBUG
        scheduler: DEBUG
        dallas: DEBUG
        i2c: DEBUG
        ext_eeprom: DEBUG

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Web-C34484"
    password: "hlVBVePNuBE3"

captive_portal:
uart:
  rx_pin: GPIO16 
  tx_pin: GPIO17 
  baud_rate: 115200

time:
  - platform: ds1307
    id: rtc_time
    # repeated synchronization is not necessary unless the external RTC
    # is much more accurate than the internal clock
    update_interval: never
 #   on_time:
      # Every 60 seconds
 #     - seconds: /60
        
#        then:
#          - lambda: |-
 #               ESP_LOGD("main", "Debug output every 60 seconds"); 
#                id(ext_eeprom_component_1).dump_EEPROM(1000,1000);
        
    
  - platform: homeassistant
    # instead try to synchronize via network repeatedly ...
    on_time_sync:
      then:
        # ... and update the RTC when the synchronization was successful
        ds1307.write_time:
        
http_request:

i2c:
  sda: GPIO21
  scl: GPIO22
  scan: true    
  
ext_eeprom_component:
  id: ext_eeprom_component_1
  address: 0x57
  pollWriteComplete: true
  writeTime: 5
  pageSize: 32
  memorySize: 4096
  
rtc_scheduler:
  - id: scheduler_hub
    name: "Scheduler Hub"
    storage: ext_eeprom_component_1
    schedulers:
      - id: scheduler_1
        name: "Scheduler 1"
        storage_offset: 1000
        max_events_per_switch: 56
        schedule_controller_status_id: "Heater Sheduler Status"
        scheduler_ind: "Heater Indicator"
        scheduler_enable: 
          name: "Heater Scheduler"
          on_turn_on:
            then:
              - logger.log: "Heater Turned On by action!"
        switches:
          - scheduled_switch_mode: "Element 1 Mode"
            scheduled_switch: 
              name: "Element 1"
              on_turn_on:
                then:
                - logger.log: "element 1 Turned On by action!"
            scheduled_switch_id: relay1
            scheduled_switch_slot: 1
            scheduled_switch_status: "Element 1 Status"
            scheduled_switch_next_event_text: "Element 1 Next Event"
            scheduled_switch_indicator: "Element 1 Indicator"
          - scheduled_switch: "Element 2"
            scheduled_switch_id: relay2
            scheduled_switch_slot: 2  
            scheduled_switch_status: "Element 2 Status"
            scheduled_switch_mode: "Element 2 Mode"
            scheduled_switch_indicator: "Element 2 Indicator"    
      - id: scheduler_2
        name: "Scheduler 2"
        storage_offset: 2000
        max_events_per_switch: 56
        scheduler_enable: "Pump Scheduler"
        schedule_controller_status_id: "Pump Scheduler Status"
        scheduler_ind: "Pump Indicator"
        switches:
          - scheduled_switch: "Pump 1"
            scheduled_switch_id: relay3
            scheduled_switch_slot: 3
            scheduled_switch_status: "Pump 1 Status"
            scheduled_switch_mode: "Pump 1 Mode"
            scheduled_switch_indicator: "Pump 1 Indicator"
          - scheduled_switch: "Water Valve"
            scheduled_switch_id: relay4 
            scheduled_switch_slot: 4        
            scheduled_switch_status: "Water Valve Status"
            scheduled_switch_mode: "Water Valve Mode"
            scheduled_switch_indicator: "Water Valve Indicator"

switch:
  - platform: gpio
    name: "Relay 3"
    id: relay3
    pin: GPIO13
  - platform: gpio
    name: "Relay 1"
    id: relay1
    pin: GPIO27
  - platform: gpio
    name: "Relay 2"
    id: relay2
    pin: GPIO26
  - platform: gpio
    name: "Relay 4"
    id: relay4
    pin: GPIO25
  - platform: gpio
    id: sprinkler_pump_sw0
    pin: 12
  - platform: gpio
    id: sprinkler_pump_sw1
    pin: 10
  - platform: gpio
    id: lawn_sprinkler_valve_sw0
    pin: 0
  - platform: gpio
    id: lawn_sprinkler_valve_sw1
    pin: 2
  - platform: gpio
    id: lawn_sprinkler_valve_sw2
    pin: 4
  - platform: gpio
    id: garden_sprinkler_valve_sw0
    pin: 14
  - platform: gpio
    id: garden_sprinkler_valve_sw1
    pin: 15
  - platform: template
    name: "Test State Switch"
    id: "test_state_switch"
    turn_on_action:
        - lambda: |-
              id(test_state_switch).publish_state(true);
              id(scheduler_1).set_slot_sw_state(1,true);
              ESP_LOGD("main", "Slot 1 On");
    turn_off_action:
      - lambda: |-
              id(test_state_switch).publish_state(false);
              id(scheduler_1).set_slot_sw_state(1,false);
              ESP_LOGD("main", "Slot 1 Off");  
  - platform: template    
    name: "Test Valid Switch"
    id: "test_valid_switch"
    turn_on_action:
        - lambda: |-
              id(test_valid_switch).publish_state(true);
              id(scheduler_1).set_slot_valid(1,true);
              ESP_LOGD("main", "Slot 1 valid");
    turn_off_action:
        - lambda: |-
              id(test_valid_switch).publish_state(false);
              id(scheduler_1).set_slot_valid(1,false);
              ESP_LOGD("main", "Slot 1 not valid");
  - platform: template    
    name: "Test EEPROM Switch"
    id: "test_ee_switch"
    turn_on_action:
        - lambda: |-
              ESP_LOGD("Eeprom", "Mem size in bytes: %d", ext_eeprom_component_1->get_memory_size());
              int32_t myValue2 = -460;
              ext_eeprom_component_1->write_object(10, myValue2); //(location, data)
              int32_t myRead2;
              ext_eeprom_component_1->read_object(10, myRead2); //location to read, thing to put data into
              ESP_LOGD("Eeprom", "I read: %d",myRead2 );
              float myValue3 = -7.35;
              ext_eeprom_component_1->write_object(20, myValue3); //(location, data)
              float myRead3;
              ext_eeprom_component_1->read_object(20, myRead3); //location to read, thing to put data into
              ESP_LOGD("Eeprom","I read: %f",myRead3);
              std::string myString = "This is a test ";
              ext_eeprom_component_1->writeStringToEEPROM(40, myString); //(location, data)
              std::string myRead4;
              ext_eeprom_component_1->readStringFromEEPROM(40, myRead4); //location to read, thing to put data into
              ESP_LOGD("Eeprom","I read: %s",myRead4.c_str());
              ext_eeprom_component_1->dump_EEPROM(0,96);
             